#!/usr/bin/python

import os
import cv2 as cv
import numpy as np
import pfmutil as pfm


def get_filenames(dir_path):
    f = []
    for (_, _, filenames) in os.walk(dir_path):
        f.extend(filenames)
    return f

working_dir = "/home/saeid/00 Datasets/Freiburg/"
left_path = working_dir + "left/"
right_path = working_dir + "right/"
gt_path = working_dir + "left_gt/"
left_disp_path = working_dir + "new_disp_left_mccnn/"
right_disp_path = working_dir + "new_disp_right_mccnn/"

width = 540
height = 960
max_disp = 70

for i in range(1,801):
    gt, scale = pfm.load(gt_path + str(i).zfill(4) + ".pfm")
    #print (scale, np.max(gt))
    gt_max = int(np.max(gt))
    if gt_max > max_disp:
        max_disp = gt_max

#print (max_disp) #result was 269 left ground truth


right_done = [x.split(".")[0] for x in get_filenames(left_disp_path)]
left_done = [x.split(".")[0] for x in get_filenames(right_disp_path)]

f = get_filenames(left_path)
ext = f[0].split(".")[-1]
fnames = list()
for i in range(len(f)):
    parsedName = f[i].split(".")
    if len(parsedName) > 2:
        print ("Parsing left image name Error: There is a dot in filename.")
    if parsedName[-1] != ext:
        print ("Parsing left imagee Error: There are more than single type available")
    fnames.append(parsedName[0])

os.system ("echo \"\nTemporary output file for Freiburg disparity construction.\n\" > tempout.txt")

for i in range (len(fnames)):
    left_img = left_path + fnames[i] + "." + ext
    right_img = right_path + fnames[i] + "." + ext
    command = "./main.lua kitti fast -a predict" +\
        " -net_fname net/net_kitti_fast_-a_train_all.t7" +\
        " -left \"" + left_img + "\""+ \
        " -right \"" + right_img + "\"" +\
        " -disp_max " + str(max_disp) + " >> tempout.txt"
    
    if not (fnames[i] in left_done) or not (fnames[i] in right_done): 
        os.system(command)

        left = np.memmap('./left.bin', dtype=np.float32, shape=(1, max_disp, width, height))
        right = np.memmap('./right.bin', dtype=np.float32, shape=(1, max_disp, width, height))
        
pfm.save(left_disp_path + fnames[i]+".pfm", left[0,0,:,:])
        pfm.save(right_disp_path + fnames[i]+".pfm", right[0,0,:,:])


